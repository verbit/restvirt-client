// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: minivirt/controller.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ControllerService_GetDNSRecord_FullMethodName          = "/ControllerService/GetDNSRecord"
	ControllerService_ListDNSRecords_FullMethodName        = "/ControllerService/ListDNSRecords"
	ControllerService_PutDNSRecord_FullMethodName          = "/ControllerService/PutDNSRecord"
	ControllerService_DeleteDNSRecord_FullMethodName       = "/ControllerService/DeleteDNSRecord"
	ControllerService_GetNetwork_FullMethodName            = "/ControllerService/GetNetwork"
	ControllerService_ListNetworks_FullMethodName          = "/ControllerService/ListNetworks"
	ControllerService_CreateNetwork_FullMethodName         = "/ControllerService/CreateNetwork"
	ControllerService_DeleteNetwork_FullMethodName         = "/ControllerService/DeleteNetwork"
	ControllerService_StartDomain_FullMethodName           = "/ControllerService/StartDomain"
	ControllerService_StopDomain_FullMethodName            = "/ControllerService/StopDomain"
	ControllerService_GetDomain_FullMethodName             = "/ControllerService/GetDomain"
	ControllerService_ListDomains_FullMethodName           = "/ControllerService/ListDomains"
	ControllerService_CreateDomain_FullMethodName          = "/ControllerService/CreateDomain"
	ControllerService_DeleteDomain_FullMethodName          = "/ControllerService/DeleteDomain"
	ControllerService_DownloadImage_FullMethodName         = "/ControllerService/DownloadImage"
	ControllerService_GetVolume_FullMethodName             = "/ControllerService/GetVolume"
	ControllerService_ListVolumes_FullMethodName           = "/ControllerService/ListVolumes"
	ControllerService_CreateVolume_FullMethodName          = "/ControllerService/CreateVolume"
	ControllerService_UpdateVolume_FullMethodName          = "/ControllerService/UpdateVolume"
	ControllerService_DeleteVolume_FullMethodName          = "/ControllerService/DeleteVolume"
	ControllerService_ListVolumeAttachments_FullMethodName = "/ControllerService/ListVolumeAttachments"
	ControllerService_GetVolumeAttachment_FullMethodName   = "/ControllerService/GetVolumeAttachment"
	ControllerService_AttachVolume_FullMethodName          = "/ControllerService/AttachVolume"
	ControllerService_DetachVolume_FullMethodName          = "/ControllerService/DetachVolume"
	ControllerService_GetPortForwarding_FullMethodName     = "/ControllerService/GetPortForwarding"
	ControllerService_ListPortForwardings_FullMethodName   = "/ControllerService/ListPortForwardings"
	ControllerService_PutPortForwarding_FullMethodName     = "/ControllerService/PutPortForwarding"
	ControllerService_DeletePortForwarding_FullMethodName  = "/ControllerService/DeletePortForwarding"
	ControllerService_GetRouteTable_FullMethodName         = "/ControllerService/GetRouteTable"
	ControllerService_ListRouteTables_FullMethodName       = "/ControllerService/ListRouteTables"
	ControllerService_CreateRouteTable_FullMethodName      = "/ControllerService/CreateRouteTable"
	ControllerService_DeleteRouteTable_FullMethodName      = "/ControllerService/DeleteRouteTable"
	ControllerService_GetRoute_FullMethodName              = "/ControllerService/GetRoute"
	ControllerService_ListRoutes_FullMethodName            = "/ControllerService/ListRoutes"
	ControllerService_PutRoute_FullMethodName              = "/ControllerService/PutRoute"
	ControllerService_DeleteRoute_FullMethodName           = "/ControllerService/DeleteRoute"
	ControllerService_SyncRoutes_FullMethodName            = "/ControllerService/SyncRoutes"
)

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerServiceClient interface {
	GetDNSRecord(ctx context.Context, in *DNSRecordIdentifier, opts ...grpc.CallOption) (*DNSRecord, error)
	ListDNSRecords(ctx context.Context, in *ListDNSRecordsRequest, opts ...grpc.CallOption) (*ListDNSRecordsResponse, error)
	PutDNSRecord(ctx context.Context, in *PutDNSRecordRequest, opts ...grpc.CallOption) (*DNSRecord, error)
	DeleteDNSRecord(ctx context.Context, in *DNSRecordIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StartDomain(ctx context.Context, in *StartDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StopDomain(ctx context.Context, in *StopDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (ControllerService_DownloadImageClient, error)
	GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*Volume, error)
	ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error)
	CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*Volume, error)
	UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, opts ...grpc.CallOption) (*Volume, error)
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListVolumeAttachments(ctx context.Context, in *ListVolumeAttachmentsRequest, opts ...grpc.CallOption) (*ListVolumeAttachmentsResponse, error)
	GetVolumeAttachment(ctx context.Context, in *VolumeAttachmentIdentifier, opts ...grpc.CallOption) (*VolumeAttachment, error)
	AttachVolume(ctx context.Context, in *VolumeAttachmentIdentifier, opts ...grpc.CallOption) (*VolumeAttachment, error)
	DetachVolume(ctx context.Context, in *VolumeAttachmentIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPortForwarding(ctx context.Context, in *PortForwardingIdentifier, opts ...grpc.CallOption) (*PortForwarding, error)
	ListPortForwardings(ctx context.Context, in *ListPortForwardingsRequest, opts ...grpc.CallOption) (*ListPortForwardingsResponse, error)
	PutPortForwarding(ctx context.Context, in *PutPortForwardingRequest, opts ...grpc.CallOption) (*PortForwarding, error)
	DeletePortForwarding(ctx context.Context, in *PortForwardingIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRouteTable(ctx context.Context, in *RouteTableIdentifier, opts ...grpc.CallOption) (*RouteTable, error)
	ListRouteTables(ctx context.Context, in *ListRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error)
	CreateRouteTable(ctx context.Context, in *CreateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error)
	DeleteRouteTable(ctx context.Context, in *RouteTableIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRoute(ctx context.Context, in *RouteIdentifier, opts ...grpc.CallOption) (*Route, error)
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
	PutRoute(ctx context.Context, in *PutRouteRequest, opts ...grpc.CallOption) (*Route, error)
	DeleteRoute(ctx context.Context, in *RouteIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SyncRoutes(ctx context.Context, in *SyncRoutesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type controllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerServiceClient(cc grpc.ClientConnInterface) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) GetDNSRecord(ctx context.Context, in *DNSRecordIdentifier, opts ...grpc.CallOption) (*DNSRecord, error) {
	out := new(DNSRecord)
	err := c.cc.Invoke(ctx, ControllerService_GetDNSRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListDNSRecords(ctx context.Context, in *ListDNSRecordsRequest, opts ...grpc.CallOption) (*ListDNSRecordsResponse, error) {
	out := new(ListDNSRecordsResponse)
	err := c.cc.Invoke(ctx, ControllerService_ListDNSRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) PutDNSRecord(ctx context.Context, in *PutDNSRecordRequest, opts ...grpc.CallOption) (*DNSRecord, error) {
	out := new(DNSRecord)
	err := c.cc.Invoke(ctx, ControllerService_PutDNSRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteDNSRecord(ctx context.Context, in *DNSRecordIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerService_DeleteDNSRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := c.cc.Invoke(ctx, ControllerService_GetNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, ControllerService_ListNetworks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := c.cc.Invoke(ctx, ControllerService_CreateNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerService_DeleteNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) StartDomain(ctx context.Context, in *StartDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerService_StartDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) StopDomain(ctx context.Context, in *StopDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerService_StopDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, ControllerService_GetDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	out := new(ListDomainsResponse)
	err := c.cc.Invoke(ctx, ControllerService_ListDomains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, ControllerService_CreateDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerService_DeleteDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (ControllerService_DownloadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ControllerService_ServiceDesc.Streams[0], ControllerService_DownloadImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerServiceDownloadImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControllerService_DownloadImageClient interface {
	Recv() (*ImageChunk, error)
	grpc.ClientStream
}

type controllerServiceDownloadImageClient struct {
	grpc.ClientStream
}

func (x *controllerServiceDownloadImageClient) Recv() (*ImageChunk, error) {
	m := new(ImageChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerServiceClient) GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, ControllerService_GetVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error) {
	out := new(ListVolumesResponse)
	err := c.cc.Invoke(ctx, ControllerService_ListVolumes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, ControllerService_CreateVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, ControllerService_UpdateVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerService_DeleteVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListVolumeAttachments(ctx context.Context, in *ListVolumeAttachmentsRequest, opts ...grpc.CallOption) (*ListVolumeAttachmentsResponse, error) {
	out := new(ListVolumeAttachmentsResponse)
	err := c.cc.Invoke(ctx, ControllerService_ListVolumeAttachments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetVolumeAttachment(ctx context.Context, in *VolumeAttachmentIdentifier, opts ...grpc.CallOption) (*VolumeAttachment, error) {
	out := new(VolumeAttachment)
	err := c.cc.Invoke(ctx, ControllerService_GetVolumeAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) AttachVolume(ctx context.Context, in *VolumeAttachmentIdentifier, opts ...grpc.CallOption) (*VolumeAttachment, error) {
	out := new(VolumeAttachment)
	err := c.cc.Invoke(ctx, ControllerService_AttachVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DetachVolume(ctx context.Context, in *VolumeAttachmentIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerService_DetachVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetPortForwarding(ctx context.Context, in *PortForwardingIdentifier, opts ...grpc.CallOption) (*PortForwarding, error) {
	out := new(PortForwarding)
	err := c.cc.Invoke(ctx, ControllerService_GetPortForwarding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListPortForwardings(ctx context.Context, in *ListPortForwardingsRequest, opts ...grpc.CallOption) (*ListPortForwardingsResponse, error) {
	out := new(ListPortForwardingsResponse)
	err := c.cc.Invoke(ctx, ControllerService_ListPortForwardings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) PutPortForwarding(ctx context.Context, in *PutPortForwardingRequest, opts ...grpc.CallOption) (*PortForwarding, error) {
	out := new(PortForwarding)
	err := c.cc.Invoke(ctx, ControllerService_PutPortForwarding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeletePortForwarding(ctx context.Context, in *PortForwardingIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerService_DeletePortForwarding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetRouteTable(ctx context.Context, in *RouteTableIdentifier, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := c.cc.Invoke(ctx, ControllerService_GetRouteTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListRouteTables(ctx context.Context, in *ListRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error) {
	out := new(ListRouteTablesResponse)
	err := c.cc.Invoke(ctx, ControllerService_ListRouteTables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CreateRouteTable(ctx context.Context, in *CreateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := c.cc.Invoke(ctx, ControllerService_CreateRouteTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteRouteTable(ctx context.Context, in *RouteTableIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerService_DeleteRouteTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetRoute(ctx context.Context, in *RouteIdentifier, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, ControllerService_GetRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, ControllerService_ListRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) PutRoute(ctx context.Context, in *PutRouteRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, ControllerService_PutRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteRoute(ctx context.Context, in *RouteIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerService_DeleteRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) SyncRoutes(ctx context.Context, in *SyncRoutesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerService_SyncRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServiceServer is the server API for ControllerService service.
// All implementations must embed UnimplementedControllerServiceServer
// for forward compatibility
type ControllerServiceServer interface {
	GetDNSRecord(context.Context, *DNSRecordIdentifier) (*DNSRecord, error)
	ListDNSRecords(context.Context, *ListDNSRecordsRequest) (*ListDNSRecordsResponse, error)
	PutDNSRecord(context.Context, *PutDNSRecordRequest) (*DNSRecord, error)
	DeleteDNSRecord(context.Context, *DNSRecordIdentifier) (*emptypb.Empty, error)
	GetNetwork(context.Context, *GetNetworkRequest) (*Network, error)
	ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	CreateNetwork(context.Context, *CreateNetworkRequest) (*Network, error)
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*emptypb.Empty, error)
	StartDomain(context.Context, *StartDomainRequest) (*emptypb.Empty, error)
	StopDomain(context.Context, *StopDomainRequest) (*emptypb.Empty, error)
	GetDomain(context.Context, *GetDomainRequest) (*Domain, error)
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	CreateDomain(context.Context, *CreateDomainRequest) (*Domain, error)
	DeleteDomain(context.Context, *DeleteDomainRequest) (*emptypb.Empty, error)
	DownloadImage(*DownloadImageRequest, ControllerService_DownloadImageServer) error
	GetVolume(context.Context, *GetVolumeRequest) (*Volume, error)
	ListVolumes(context.Context, *ListVolumesRequest) (*ListVolumesResponse, error)
	CreateVolume(context.Context, *CreateVolumeRequest) (*Volume, error)
	UpdateVolume(context.Context, *UpdateVolumeRequest) (*Volume, error)
	DeleteVolume(context.Context, *DeleteVolumeRequest) (*emptypb.Empty, error)
	ListVolumeAttachments(context.Context, *ListVolumeAttachmentsRequest) (*ListVolumeAttachmentsResponse, error)
	GetVolumeAttachment(context.Context, *VolumeAttachmentIdentifier) (*VolumeAttachment, error)
	AttachVolume(context.Context, *VolumeAttachmentIdentifier) (*VolumeAttachment, error)
	DetachVolume(context.Context, *VolumeAttachmentIdentifier) (*emptypb.Empty, error)
	GetPortForwarding(context.Context, *PortForwardingIdentifier) (*PortForwarding, error)
	ListPortForwardings(context.Context, *ListPortForwardingsRequest) (*ListPortForwardingsResponse, error)
	PutPortForwarding(context.Context, *PutPortForwardingRequest) (*PortForwarding, error)
	DeletePortForwarding(context.Context, *PortForwardingIdentifier) (*emptypb.Empty, error)
	GetRouteTable(context.Context, *RouteTableIdentifier) (*RouteTable, error)
	ListRouteTables(context.Context, *ListRouteTablesRequest) (*ListRouteTablesResponse, error)
	CreateRouteTable(context.Context, *CreateRouteTableRequest) (*RouteTable, error)
	DeleteRouteTable(context.Context, *RouteTableIdentifier) (*emptypb.Empty, error)
	GetRoute(context.Context, *RouteIdentifier) (*Route, error)
	ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error)
	PutRoute(context.Context, *PutRouteRequest) (*Route, error)
	DeleteRoute(context.Context, *RouteIdentifier) (*emptypb.Empty, error)
	SyncRoutes(context.Context, *SyncRoutesRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedControllerServiceServer()
}

// UnimplementedControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServiceServer struct {
}

func (UnimplementedControllerServiceServer) GetDNSRecord(context.Context, *DNSRecordIdentifier) (*DNSRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDNSRecord not implemented")
}
func (UnimplementedControllerServiceServer) ListDNSRecords(context.Context, *ListDNSRecordsRequest) (*ListDNSRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDNSRecords not implemented")
}
func (UnimplementedControllerServiceServer) PutDNSRecord(context.Context, *PutDNSRecordRequest) (*DNSRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDNSRecord not implemented")
}
func (UnimplementedControllerServiceServer) DeleteDNSRecord(context.Context, *DNSRecordIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDNSRecord not implemented")
}
func (UnimplementedControllerServiceServer) GetNetwork(context.Context, *GetNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (UnimplementedControllerServiceServer) ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedControllerServiceServer) CreateNetwork(context.Context, *CreateNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedControllerServiceServer) DeleteNetwork(context.Context, *DeleteNetworkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedControllerServiceServer) StartDomain(context.Context, *StartDomainRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDomain not implemented")
}
func (UnimplementedControllerServiceServer) StopDomain(context.Context, *StopDomainRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDomain not implemented")
}
func (UnimplementedControllerServiceServer) GetDomain(context.Context, *GetDomainRequest) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomain not implemented")
}
func (UnimplementedControllerServiceServer) ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomains not implemented")
}
func (UnimplementedControllerServiceServer) CreateDomain(context.Context, *CreateDomainRequest) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (UnimplementedControllerServiceServer) DeleteDomain(context.Context, *DeleteDomainRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (UnimplementedControllerServiceServer) DownloadImage(*DownloadImageRequest, ControllerService_DownloadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (UnimplementedControllerServiceServer) GetVolume(context.Context, *GetVolumeRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolume not implemented")
}
func (UnimplementedControllerServiceServer) ListVolumes(context.Context, *ListVolumesRequest) (*ListVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVolumes not implemented")
}
func (UnimplementedControllerServiceServer) CreateVolume(context.Context, *CreateVolumeRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (UnimplementedControllerServiceServer) UpdateVolume(context.Context, *UpdateVolumeRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVolume not implemented")
}
func (UnimplementedControllerServiceServer) DeleteVolume(context.Context, *DeleteVolumeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (UnimplementedControllerServiceServer) ListVolumeAttachments(context.Context, *ListVolumeAttachmentsRequest) (*ListVolumeAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVolumeAttachments not implemented")
}
func (UnimplementedControllerServiceServer) GetVolumeAttachment(context.Context, *VolumeAttachmentIdentifier) (*VolumeAttachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolumeAttachment not implemented")
}
func (UnimplementedControllerServiceServer) AttachVolume(context.Context, *VolumeAttachmentIdentifier) (*VolumeAttachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachVolume not implemented")
}
func (UnimplementedControllerServiceServer) DetachVolume(context.Context, *VolumeAttachmentIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachVolume not implemented")
}
func (UnimplementedControllerServiceServer) GetPortForwarding(context.Context, *PortForwardingIdentifier) (*PortForwarding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortForwarding not implemented")
}
func (UnimplementedControllerServiceServer) ListPortForwardings(context.Context, *ListPortForwardingsRequest) (*ListPortForwardingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortForwardings not implemented")
}
func (UnimplementedControllerServiceServer) PutPortForwarding(context.Context, *PutPortForwardingRequest) (*PortForwarding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPortForwarding not implemented")
}
func (UnimplementedControllerServiceServer) DeletePortForwarding(context.Context, *PortForwardingIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortForwarding not implemented")
}
func (UnimplementedControllerServiceServer) GetRouteTable(context.Context, *RouteTableIdentifier) (*RouteTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteTable not implemented")
}
func (UnimplementedControllerServiceServer) ListRouteTables(context.Context, *ListRouteTablesRequest) (*ListRouteTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRouteTables not implemented")
}
func (UnimplementedControllerServiceServer) CreateRouteTable(context.Context, *CreateRouteTableRequest) (*RouteTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouteTable not implemented")
}
func (UnimplementedControllerServiceServer) DeleteRouteTable(context.Context, *RouteTableIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouteTable not implemented")
}
func (UnimplementedControllerServiceServer) GetRoute(context.Context, *RouteIdentifier) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedControllerServiceServer) ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedControllerServiceServer) PutRoute(context.Context, *PutRouteRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRoute not implemented")
}
func (UnimplementedControllerServiceServer) DeleteRoute(context.Context, *RouteIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedControllerServiceServer) SyncRoutes(context.Context, *SyncRoutesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRoutes not implemented")
}
func (UnimplementedControllerServiceServer) mustEmbedUnimplementedControllerServiceServer() {}

// UnsafeControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServiceServer will
// result in compilation errors.
type UnsafeControllerServiceServer interface {
	mustEmbedUnimplementedControllerServiceServer()
}

func RegisterControllerServiceServer(s grpc.ServiceRegistrar, srv ControllerServiceServer) {
	s.RegisterService(&ControllerService_ServiceDesc, srv)
}

func _ControllerService_GetDNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSRecordIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetDNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_GetDNSRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetDNSRecord(ctx, req.(*DNSRecordIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListDNSRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDNSRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListDNSRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_ListDNSRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListDNSRecords(ctx, req.(*ListDNSRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_PutDNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDNSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).PutDNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_PutDNSRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).PutDNSRecord(ctx, req.(*PutDNSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteDNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSRecordIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteDNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_DeleteDNSRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteDNSRecord(ctx, req.(*DNSRecordIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_GetNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetNetwork(ctx, req.(*GetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_CreateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_DeleteNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteNetwork(ctx, req.(*DeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_StartDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).StartDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_StartDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).StartDomain(ctx, req.(*StartDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_StopDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).StopDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_StopDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).StopDomain(ctx, req.(*StopDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_GetDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_ListDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_CreateDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_DeleteDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DownloadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServiceServer).DownloadImage(m, &controllerServiceDownloadImageServer{stream})
}

type ControllerService_DownloadImageServer interface {
	Send(*ImageChunk) error
	grpc.ServerStream
}

type controllerServiceDownloadImageServer struct {
	grpc.ServerStream
}

func (x *controllerServiceDownloadImageServer) Send(m *ImageChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ControllerService_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_GetVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetVolume(ctx, req.(*GetVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_ListVolumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListVolumes(ctx, req.(*ListVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_CreateVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CreateVolume(ctx, req.(*CreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_UpdateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).UpdateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_UpdateVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).UpdateVolume(ctx, req.(*UpdateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_DeleteVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteVolume(ctx, req.(*DeleteVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListVolumeAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolumeAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListVolumeAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_ListVolumeAttachments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListVolumeAttachments(ctx, req.(*ListVolumeAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeAttachmentIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_GetVolumeAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetVolumeAttachment(ctx, req.(*VolumeAttachmentIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_AttachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeAttachmentIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).AttachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_AttachVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).AttachVolume(ctx, req.(*VolumeAttachmentIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DetachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeAttachmentIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DetachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_DetachVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DetachVolume(ctx, req.(*VolumeAttachmentIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetPortForwarding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortForwardingIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetPortForwarding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_GetPortForwarding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetPortForwarding(ctx, req.(*PortForwardingIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListPortForwardings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortForwardingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListPortForwardings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_ListPortForwardings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListPortForwardings(ctx, req.(*ListPortForwardingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_PutPortForwarding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPortForwardingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).PutPortForwarding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_PutPortForwarding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).PutPortForwarding(ctx, req.(*PutPortForwardingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeletePortForwarding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortForwardingIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeletePortForwarding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_DeletePortForwarding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeletePortForwarding(ctx, req.(*PortForwardingIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_GetRouteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetRouteTable(ctx, req.(*RouteTableIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListRouteTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRouteTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListRouteTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_ListRouteTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListRouteTables(ctx, req.(*ListRouteTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CreateRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CreateRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_CreateRouteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CreateRouteTable(ctx, req.(*CreateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_DeleteRouteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteRouteTable(ctx, req.(*RouteTableIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_GetRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetRoute(ctx, req.(*RouteIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_ListRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_PutRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).PutRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_PutRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).PutRoute(ctx, req.(*PutRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_DeleteRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteRoute(ctx, req.(*RouteIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_SyncRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).SyncRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_SyncRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).SyncRoutes(ctx, req.(*SyncRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControllerService_ServiceDesc is the grpc.ServiceDesc for ControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDNSRecord",
			Handler:    _ControllerService_GetDNSRecord_Handler,
		},
		{
			MethodName: "ListDNSRecords",
			Handler:    _ControllerService_ListDNSRecords_Handler,
		},
		{
			MethodName: "PutDNSRecord",
			Handler:    _ControllerService_PutDNSRecord_Handler,
		},
		{
			MethodName: "DeleteDNSRecord",
			Handler:    _ControllerService_DeleteDNSRecord_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _ControllerService_GetNetwork_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _ControllerService_ListNetworks_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _ControllerService_CreateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _ControllerService_DeleteNetwork_Handler,
		},
		{
			MethodName: "StartDomain",
			Handler:    _ControllerService_StartDomain_Handler,
		},
		{
			MethodName: "StopDomain",
			Handler:    _ControllerService_StopDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _ControllerService_GetDomain_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _ControllerService_ListDomains_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _ControllerService_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _ControllerService_DeleteDomain_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _ControllerService_GetVolume_Handler,
		},
		{
			MethodName: "ListVolumes",
			Handler:    _ControllerService_ListVolumes_Handler,
		},
		{
			MethodName: "CreateVolume",
			Handler:    _ControllerService_CreateVolume_Handler,
		},
		{
			MethodName: "UpdateVolume",
			Handler:    _ControllerService_UpdateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _ControllerService_DeleteVolume_Handler,
		},
		{
			MethodName: "ListVolumeAttachments",
			Handler:    _ControllerService_ListVolumeAttachments_Handler,
		},
		{
			MethodName: "GetVolumeAttachment",
			Handler:    _ControllerService_GetVolumeAttachment_Handler,
		},
		{
			MethodName: "AttachVolume",
			Handler:    _ControllerService_AttachVolume_Handler,
		},
		{
			MethodName: "DetachVolume",
			Handler:    _ControllerService_DetachVolume_Handler,
		},
		{
			MethodName: "GetPortForwarding",
			Handler:    _ControllerService_GetPortForwarding_Handler,
		},
		{
			MethodName: "ListPortForwardings",
			Handler:    _ControllerService_ListPortForwardings_Handler,
		},
		{
			MethodName: "PutPortForwarding",
			Handler:    _ControllerService_PutPortForwarding_Handler,
		},
		{
			MethodName: "DeletePortForwarding",
			Handler:    _ControllerService_DeletePortForwarding_Handler,
		},
		{
			MethodName: "GetRouteTable",
			Handler:    _ControllerService_GetRouteTable_Handler,
		},
		{
			MethodName: "ListRouteTables",
			Handler:    _ControllerService_ListRouteTables_Handler,
		},
		{
			MethodName: "CreateRouteTable",
			Handler:    _ControllerService_CreateRouteTable_Handler,
		},
		{
			MethodName: "DeleteRouteTable",
			Handler:    _ControllerService_DeleteRouteTable_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _ControllerService_GetRoute_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _ControllerService_ListRoutes_Handler,
		},
		{
			MethodName: "PutRoute",
			Handler:    _ControllerService_PutRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _ControllerService_DeleteRoute_Handler,
		},
		{
			MethodName: "SyncRoutes",
			Handler:    _ControllerService_SyncRoutes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadImage",
			Handler:       _ControllerService_DownloadImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minivirt/controller.proto",
}
