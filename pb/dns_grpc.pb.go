// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DNSClient is the client API for DNS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DNSClient interface {
	GetDNSRecord(ctx context.Context, in *DNSRecordIdentifier, opts ...grpc.CallOption) (*DNSRecord, error)
	ListDNSRecords(ctx context.Context, in *ListDNSRecordsRequest, opts ...grpc.CallOption) (*ListDNSRecordsResponse, error)
	PutDNSRecord(ctx context.Context, in *PutDNSRecordRequest, opts ...grpc.CallOption) (*DNSRecord, error)
	DeleteDNSRecord(ctx context.Context, in *DNSRecordIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dNSClient struct {
	cc grpc.ClientConnInterface
}

func NewDNSClient(cc grpc.ClientConnInterface) DNSClient {
	return &dNSClient{cc}
}

func (c *dNSClient) GetDNSRecord(ctx context.Context, in *DNSRecordIdentifier, opts ...grpc.CallOption) (*DNSRecord, error) {
	out := new(DNSRecord)
	err := c.cc.Invoke(ctx, "/DNS/GetDNSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) ListDNSRecords(ctx context.Context, in *ListDNSRecordsRequest, opts ...grpc.CallOption) (*ListDNSRecordsResponse, error) {
	out := new(ListDNSRecordsResponse)
	err := c.cc.Invoke(ctx, "/DNS/ListDNSRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) PutDNSRecord(ctx context.Context, in *PutDNSRecordRequest, opts ...grpc.CallOption) (*DNSRecord, error) {
	out := new(DNSRecord)
	err := c.cc.Invoke(ctx, "/DNS/PutDNSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) DeleteDNSRecord(ctx context.Context, in *DNSRecordIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/DNS/DeleteDNSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSServer is the server API for DNS service.
// All implementations must embed UnimplementedDNSServer
// for forward compatibility
type DNSServer interface {
	GetDNSRecord(context.Context, *DNSRecordIdentifier) (*DNSRecord, error)
	ListDNSRecords(context.Context, *ListDNSRecordsRequest) (*ListDNSRecordsResponse, error)
	PutDNSRecord(context.Context, *PutDNSRecordRequest) (*DNSRecord, error)
	DeleteDNSRecord(context.Context, *DNSRecordIdentifier) (*emptypb.Empty, error)
	mustEmbedUnimplementedDNSServer()
}

// UnimplementedDNSServer must be embedded to have forward compatible implementations.
type UnimplementedDNSServer struct {
}

func (UnimplementedDNSServer) GetDNSRecord(context.Context, *DNSRecordIdentifier) (*DNSRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDNSRecord not implemented")
}
func (UnimplementedDNSServer) ListDNSRecords(context.Context, *ListDNSRecordsRequest) (*ListDNSRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDNSRecords not implemented")
}
func (UnimplementedDNSServer) PutDNSRecord(context.Context, *PutDNSRecordRequest) (*DNSRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDNSRecord not implemented")
}
func (UnimplementedDNSServer) DeleteDNSRecord(context.Context, *DNSRecordIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDNSRecord not implemented")
}
func (UnimplementedDNSServer) mustEmbedUnimplementedDNSServer() {}

// UnsafeDNSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DNSServer will
// result in compilation errors.
type UnsafeDNSServer interface {
	mustEmbedUnimplementedDNSServer()
}

func RegisterDNSServer(s grpc.ServiceRegistrar, srv DNSServer) {
	s.RegisterService(&DNS_ServiceDesc, srv)
}

func _DNS_GetDNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSRecordIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).GetDNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DNS/GetDNSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).GetDNSRecord(ctx, req.(*DNSRecordIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_ListDNSRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDNSRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).ListDNSRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DNS/ListDNSRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).ListDNSRecords(ctx, req.(*ListDNSRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_PutDNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDNSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).PutDNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DNS/PutDNSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).PutDNSRecord(ctx, req.(*PutDNSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_DeleteDNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSRecordIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).DeleteDNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DNS/DeleteDNSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).DeleteDNSRecord(ctx, req.(*DNSRecordIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

// DNS_ServiceDesc is the grpc.ServiceDesc for DNS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DNS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DNS",
	HandlerType: (*DNSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDNSRecord",
			Handler:    _DNS_GetDNSRecord_Handler,
		},
		{
			MethodName: "ListDNSRecords",
			Handler:    _DNS_ListDNSRecords_Handler,
		},
		{
			MethodName: "PutDNSRecord",
			Handler:    _DNS_PutDNSRecord_Handler,
		},
		{
			MethodName: "DeleteDNSRecord",
			Handler:    _DNS_DeleteDNSRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "minivirt/dns.proto",
}
